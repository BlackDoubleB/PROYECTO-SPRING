package edu.pe.idat.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import edu.pe.idat.model.HorarioReserva;
import edu.pe.idat.model.Trabajador;
import edu.pe.idat.service.HorarioReservaService;
import edu.pe.idat.service.TrabajadorService;
import jakarta.websocket.server.PathParam;

@Controller
public class RoutesController {

	@Autowired
	private HorarioReservaService horarioReservaService;

	@Autowired
	private TrabajadorService trabajadorService;
	
	@GetMapping("/")
	public String index(Model model) {
		return "index";
	}
	
	@GetMapping("/configuracion")
	public String configuracion(Model model) {
		
		model.addAttribute("horarios", horarioReservaService.findAll());
		
		return "configuracion";
	}
	
	@GetMapping("/reservas")
	public String reservas(Model model) {
		return "reservas";
	}
	
	@GetMapping("/disponibilidad")
	public String disponibilidad(Model model) throws ParseException {
		
		Date fechaActual = new Date(System.currentTimeMillis());
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        String fechaFormateada = formato.format(fechaActual);
        
        List<HorarioReserva> horarios = horarioReservaService.findAllByFecha(fechaFormateada);
		
        List<HorarioReserva> horariosDisponibles = horarios.stream()
        		.filter(horario -> horario.getNumeroMesas() > 0)
        		.collect(Collectors.toList());
        
		model.addAttribute("horarios", horariosDisponibles);
		
		return "disponibilidad";
	}
	
	@GetMapping("/disponibilidad/table/{fecha}")
	public String disponibilidadTable(Model model, @Param("fecha")String fecha) throws ParseException {
		
		List<HorarioReserva> horarios = horarioReservaService.findAllByFecha(fecha);
		
		List<HorarioReserva> horariosDisponibles = horarios.stream()
				.filter(horario -> horario.getNumeroMesas() > 0)
				.collect(Collectors.toList());
		
		model.addAttribute("horarios", horariosDisponibles);
		
		return "fragments/disponibilidad-table :: table";
	}
	
	@GetMapping("/usuarios")
	public String usuarios(Model model) {
		
		List<Trabajador> trabajadores;
		
		try {
			trabajadores = trabajadorService.findAll();
		}catch(Exception e) {
			trabajadores = new ArrayList<Trabajador>();
		}
		
		model.addAttribute("trabajadores", trabajadores);
		
		return "usuarios";
	}
	
	@GetMapping("/usuarios/table/{nombre}")
	public String usuariosTable(Model model, @Param("nombre") String nombre) throws Exception{
		
		model.addAttribute("trabajadores", trabajadorService.findAllByPersonaNombreCompletosContaining(nombre));
		
		return "fragments/usuarios-table :: table";
	}
	
	
	@RequestMapping("*")
    public String handleNotFound() {
        return "redirect:/reservas";
    }
}
