package edu.pe.idat.controller;

import java.text.ParseException;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import edu.pe.idat.model.HorarioReserva;
import edu.pe.idat.model.Reserva;
import edu.pe.idat.service.ConsumidorService;
import edu.pe.idat.service.HorarioReservaService;
import edu.pe.idat.service.ReservaService;
import jakarta.servlet.http.HttpServletRequest;

@Controller
public class RoutesController {

	@Autowired
	private ConsumidorService consumidorService;
	
	@Autowired
	private HorarioReservaService horarioReservaService;
	
	@Autowired
	private ReservaService reservaService;
	
	@GetMapping("/")
	public String index(Model model) {
		return "index";
	}
	
	@GetMapping("/ingresar")
	public String ingresar(Model model) {
		return "ingresar";
	}
	
	@GetMapping("/crear-cuenta")
	public String crearCuenta(Model model) {
		return "crear-cuenta";
	}
	
	@GetMapping("/crear-reserva")
	@PreAuthorize("hasRole('CONSUMIDOR')")
	public String crearReserva(Model model, HttpServletRequest request) throws ParseException {
		
		var nombre = request.getUserPrincipal().getName();
		var usuario = consumidorService.findOneByUsuario(nombre);
		
		var horarios = horarioReservaService.findAllByFecha("");
		
		model.addAttribute("usuario", usuario);
		model.addAttribute("horarios", horarios);
		
		return "crear-reserva";
	}
	
	@GetMapping("/crear-reserva/combo-horario")
	@PreAuthorize("hasRole('CONSUMIDOR')")
	public String comboHorarioReservas(Model model, @Param("fecha")String fecha) throws ParseException {
		
		List<HorarioReserva> horarios = horarioReservaService.findAllByFecha(fecha);
		
		List<HorarioReserva> horariosDisponibles = horarios.stream()
				.filter(horario -> horario.getNumeroMesas() > 0)
				.collect(Collectors.toList());
		
		model.addAttribute("horarios", horariosDisponibles);
		
		return "fragments/reservas-combo-horarios :: combo";
	}
	
	@GetMapping("/crear-reserva/mis-reservas")
	@PreAuthorize("hasRole('CONSUMIDOR')")
	public String modalTicketReserva(Model model, @Param("idReserva") String idReserva) throws ParseException {
		
		Reserva reserva = reservaService.findById(Integer.parseInt(idReserva));
		
		model.addAttribute("reserva", reserva);
		
		return "mis-reservas";
	}
	
	@GetMapping("/mis-reservas")
	@PreAuthorize("hasRole('CONSUMIDOR')")
	public String verMisReservas(Model model) throws ParseException {
		
		return "fragments/reservas-modal-ticket :: modal";
		
	}
	
	
	@GetMapping("*")
    public String handleNotFound() {
        return "redirect:/";
    }
	
}
